<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SPRINGBOOT.KR</title>
    <link>https://springboot.kr/</link>
    <description>Recent content on SPRINGBOOT.KR</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 12 Dec 2019 00:37:20 +0900</lastBuildDate>
    
	<atom:link href="https://springboot.kr/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Golang Google Oauth Signin 인증 방법</title>
      <link>https://springboot.kr/posts/google/golang-google-oauth-signin/</link>
      <pubDate>Thu, 12 Dec 2019 00:37:20 +0900</pubDate>
      
      <guid>https://springboot.kr/posts/google/golang-google-oauth-signin/</guid>
      <description>2019년 1월에 Google+ API가 종료 됬습니다.
그래서 찾아보는데&amp;hellip; 찾았습니다.
물론 너무 짧은 시간동안 서치하고 사용한거라 원래 공유되있는 내용 일수도 있습니다.
여기로 가면 쉽게 로그인을 사용할수 있는 방법이 있는데요.
저는 또 사용하지 않았습니다.
그래서 찾은 방법은 우선 Golang Google OAuth 사용 하기와 겹치는 내용이 있기 때문에 그부분은 스킵하고 바로 진행하겠습니다.
그부분 이해하시고 참고하여 따라 하시면 됩니다.
다만 저 포스트에 나와있는 내용중 code를 발급받을때 scope를 https://www.googleapis.com/auth/userinfo.email로 잡아 주시면 됩니다.
&amp;lt;a href=&amp;#34; https://accounts.google.com/o/oauth2/v2/auth? scope=https://www.</description>
    </item>
    
    <item>
      <title>Java serialVersionUID에 대하여</title>
      <link>https://springboot.kr/posts/java/about-serialversionuid/</link>
      <pubDate>Tue, 10 Dec 2019 15:09:19 +0900</pubDate>
      
      <guid>https://springboot.kr/posts/java/about-serialversionuid/</guid>
      <description>serialVersionUID
  serialVersionUID에 란 무엇인가?
 객체를 직렬화 하여 역직렬화를 할때 사용한다. 직렬화 외에도 보안등의 용도에 사용됬다. 객체에 대한 고유번호(?)으로 생각하면 된다. serialization가 사용되는 클래스의 경우에 명시적으로 선언해 주는것을 권유한다.    어떻게 사용하는가?
 serialVersionUID를 사용하기 위해서는 static, final, long 타입이여야 한다. private을 추천함. example) private static final long serialVersionUID = 11L;     선언을 하지 않을 경우에는?
 선언을 하지 않은 경우에는 실행하는 시점에서 serialization을 담당하는 모듈을 통해 자동생성되어 디폴트값이 만들어진다.</description>
    </item>
    
    <item>
      <title>Golang Google OAuth 사용 하기</title>
      <link>https://springboot.kr/posts/google/golang-google-oauth/</link>
      <pubDate>Thu, 21 Nov 2019 17:21:14 +0800</pubDate>
      
      <guid>https://springboot.kr/posts/google/golang-google-oauth/</guid>
      <description>Golang에서 google photo를 사용하기 위해서 찾았던 내용을 정리 하려고 한다.
이건 내 방법이고 다른 방법이 있을 수 있음.
Google OAuth 2.0 for Web Server Applications
우선 위에 있는 사이트를 참조해 정리 한다.
위 사이트에서는 Go는 라이브러리가 지원 한다고 적혀 있다.
하지만 쓰지 않았다. ㅋㅋ
내가 사용한 방법은 resty라는 http 라이브러리를 사용했다.
resty는 spring으로 보면 resttemplate 같은? 나는 같은 용도로 사용한다.
resty설치를 위해 다과 같이 입력해 준다.
go get -u github.com/go-resty/resty/v2 설치가 끝나면 라이브러리를 사용할수 있다.</description>
    </item>
    
    <item>
      <title>Kubernetes Minikube 설치</title>
      <link>https://springboot.kr/posts/k8s/kubernetes-install/</link>
      <pubDate>Mon, 18 Nov 2019 19:02:57 +0800</pubDate>
      
      <guid>https://springboot.kr/posts/k8s/kubernetes-install/</guid>
      <description>맥북에서 kubernetes 설치를 위해 상단바에 있는 도커를 클릭후
Preferences&amp;hellip; 를 클릭후 kubernetes 버튼을 눌러
Enable Kubernetes를 체크 후 apply를 눌러 쿠버네티스를 활성화 시킨다.
활성화가 되는 도중에는 오른쪽 하단에 Kubernetes is starting 이란 문구가 나오고
활성화가 끝나면 오른쪽 하단에 Kubernetes is running 으로 나온다.
다음으로 kubectl을 설치해 주자 kubernetes cli 툴이다.
curl -LO &amp;quot;https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/darwin/amd64/kubectl&amp;quot; chmod +x ./kubectl sudo mv ./kubectl /usr/local/bin/kubectl 설치가 끝나면 version 체크로 확인을 해준다.
kubectl version Kubectl 설치가 끝나면 Minikube 설치를 해준다.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://springboot.kr/about/</link>
      <pubDate>Fri, 15 Nov 2019 19:34:39 +0800</pubDate>
      
      <guid>https://springboot.kr/about/</guid>
      <description>about me</description>
    </item>
    
    <item>
      <title>생성자나 열거 탕비으로 싱클턴임을 보증하라</title>
      <link>https://springboot.kr/posts/effective-java/effective-fava-3e-02-03/</link>
      <pubDate>Fri, 21 Jun 2019 14:24:00 +0800</pubDate>
      
      <guid>https://springboot.kr/posts/effective-java/effective-fava-3e-02-03/</guid>
      <description>Effective Java 3/E 2장 생성자나 열거 탕비으로 싱클턴임을 보증하라 싱글턴은 인스턴스를 하나만 만들수 있는 패턴이다.
하지만 클래스를 싱글턴으로 만들면 싱글턴 인스턴스를 Mock 구현으로 대체 할 수가 없다
그렇게 되면 이를 사용하는 클라이언트를 테스트하기가 어려워지게 된다.
아주 복잡한 직렬화 상황이나 리플렉션 공격에서도 제2의 인스턴스가 생기는 일을 완벽히 막아준다.
대부분의 상황에서는 원소가 하나뿐인 열거 타입이 싱글턴을 만드는 가장 좋은 방법이다.
하지만 만약에 싱글턴이 Enum 외의 클래스를 상속해야 한다면 이 방법은 사용할 수 없다.</description>
    </item>
    
    <item>
      <title>생성자에 매개변수가 많다면 빌더를 고려하라</title>
      <link>https://springboot.kr/posts/effective-java/effective-fava-3e-02-02/</link>
      <pubDate>Thu, 20 Jun 2019 14:23:57 +0800</pubDate>
      
      <guid>https://springboot.kr/posts/effective-java/effective-fava-3e-02-02/</guid>
      <description>Effective Java 3/E 2장 생성자에 매개변수가 많다면 빌더를 고려하라 정적 팩터리와 생성자에는 똑같은 제약이 하나 있다.
선택적 매개변수가 많을때 대응이 어렵다.
점층적 생성자 패턴도 쓸 수는 있지만 매개변수가 많아지면 클라이언트 코드를 작성하거나 읽기 어려워 진다.
public class Hello { private String str; private String str2; private String str3; public Hello(String str) { System.out.println(&amp;#34;Hello str&amp;#34; + str); } public Hello(String str, String str2) { System.out.println(&amp;#34;Hello str1, str2&amp;#34; + str + str2); } public Hello(String str, String str2) { System.</description>
    </item>
    
    <item>
      <title>생성자 대신 정적 팩토리 메서드를 고려하라</title>
      <link>https://springboot.kr/posts/effective-java/effective-fava-3e-02-01/</link>
      <pubDate>Wed, 19 Jun 2019 14:23:52 +0800</pubDate>
      
      <guid>https://springboot.kr/posts/effective-java/effective-fava-3e-02-01/</guid>
      <description>Effective Java 3/E 2장 생성자 대신 정적 팩토리 메서드를 고려하라    인스턴스를 얻는전통적 수단은 Public 생성자이다.
  클래스는 별도로 정적 팩터리 메서드를 제공 할 수 있다. (클래스의 인스턴스를 반환하는 단순한 정적 메서드)
  정적 팩터리 메서드와 팩토리 패턴은 같지 않다.
    정적 팩터리 메서드가 생성자보다 좋은점 5가지
  이름을 가질 수 없다.
 어떤게 더 의미를 잘 설명할 수 있는 가? BigInteger(int, int, Random) BigInteger.</description>
    </item>
    
    <item>
      <title>JUnit4 assert method 예시</title>
      <link>https://springboot.kr/posts/junit-01/</link>
      <pubDate>Mon, 17 Jun 2019 14:23:07 +0800</pubDate>
      
      <guid>https://springboot.kr/posts/junit-01/</guid>
      <description>JUnit4 assert method 예시    assertXxx Method 사용 목적     assertArrayEquals(&amp;quot;message&amp;quot;, A, B) 배열 A와 B가 일치함을 확인한다.   assertEquals(&amp;quot;message&amp;quot;, A, B) 객체 A와 B가 일치함을 확인한다. B를 파라미터로 A의 equals() 메서드를 호출한다(A.equals(B)).   assertSame(&amp;quot;message&amp;quot;, A, B) 객체 A와 B가 같은 객체임을 확인한다. assertEquals 메서드는 두 객체의 값이 같은가를 검사하는데 반해(equals 메서드 사용), assertSame 메서드는 두객체가 동일한, 즉 하나의 객체인가를 검사한다(== 연산자 사용)   assertTrue(&amp;quot;message&amp;quot;, A) 조건 A가 참(true)임을 확인한다.</description>
    </item>
    
    <item>
      <title>golang go-pg 사용하기</title>
      <link>https://springboot.kr/posts/golang-go-pg-1/</link>
      <pubDate>Sat, 23 Mar 2019 14:22:38 +0800</pubDate>
      
      <guid>https://springboot.kr/posts/golang-go-pg-1/</guid>
      <description>golang에서 postgresql orm go-pg 사용하기 처음 글에서는 go-pg를 사용한 connection과 close에 대해 적어본다 예제 샘플을 따라하면 잘 될것이다.
나는 postgresql을 사용하기 위함이 아니라 cockroach db를 go에서 사용하기 위해 go-pg를 선택했다.
go-pg에 대한 링크를 걸어 둡니다.
Github / Document
위에 링크를 첨부해 두었다 우선 go-pg에 접속하기 위해서는 다음과 같은 세팅을 잡는다.
 database.go  func Connect() *pg.DB { db := pg.Connect(&amp;amp;pg.Options{ User: &amp;#34;user&amp;#34;, Database: &amp;#34;database&amp;#34;, Addr: &amp;#34;addr:port&amp;#34; }) if db == nil { log.</description>
    </item>
    
    <item>
      <title>자바 XML TO JSON 변환 하기</title>
      <link>https://springboot.kr/posts/java-xml-to-json/</link>
      <pubDate>Fri, 22 Mar 2019 14:21:02 +0800</pubDate>
      
      <guid>https://springboot.kr/posts/java-xml-to-json/</guid>
      <description>XML TO JSON (AND CUSTOM OBJECT) xml 데이터를 json으로 변환하기 위한 작업이 필요하다.
그러기 위해서 spring framework에서 많이 사용하는 jackson(jackson-dataformat-xml)을 사용해 변환을 해보려 했다.
하지만 jackson 라이브러리를 사용해 xml을 json으로 변환할 때 xml의 multiple child 값들이 다 사라지면서 단일 값이 남게 된다.
그래서 찾아봤다.
똑같은 현상을 가지고 있는 사람을 발견했다.
스택오버플로우
거기에 있는 답변을 참고해보자.
  org.json 라이브러리를 추가시킨다.
  org.json 라이브러리와 jackson 라이브러리를 섞어 사용한다.
  예제 샘플이다</description>
    </item>
    
  </channel>
</rss>